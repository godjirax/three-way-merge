import Diff2 from './heckel-diff';
export class Diff2Command {
    constructor(code, baseLo, baseHi, sideLo, sideHi) {
        this.code = code;
        this.baseLo = baseLo;
        this.baseHi = baseHi;
        this.sideLo = sideLo;
        this.sideHi = sideHi;
    }
    static fromChangeRange(changeRange) {
        return new Diff2Command(changeRange.action, changeRange.leftLo, changeRange.leftHi, changeRange.rightLo, changeRange.rightHi);
    }
}
export default class Diff3 {
    constructor(left, base, right) {
        this.left = left;
        this.base = base;
        this.right = right;
    }
    static executeDiff(left, base, right) {
        return new Diff3(left, base, right).getDifferences();
    }
    getDifferences() {
        const leftDiff = Diff2.diff(this.base, this.left).map((d) => {
            return Diff2Command.fromChangeRange(d);
        });
        const rightDiff = Diff2.diff(this.base, this.right).map((d) => {
            return Diff2Command.fromChangeRange(d);
        });
        return this.collapseDifferences(new DiffDoubleQueue(leftDiff, rightDiff));
    }
    collapseDifferences(diffsQueue, differences = []) {
        if (diffsQueue.isFinished()) {
            return differences;
        }
        else {
            const resultQueue = new DiffDoubleQueue();
            const initSide = diffsQueue.chooseSide();
            const topDiff = diffsQueue.dequeue();
            resultQueue.enqueue(initSide, topDiff);
            diffsQueue.switchSides();
            this.buildResultQueue(diffsQueue, topDiff.baseHi, resultQueue);
            differences.push(this.determineDifference(resultQueue, initSide, diffsQueue.switchSides()));
            return this.collapseDifferences(diffsQueue, differences);
        }
    }
    buildResultQueue(diffsQueue, prevBaseHi, resultQueue) {
        if (this.queueIsFinished(diffsQueue.peek(), prevBaseHi)) {
            return resultQueue;
        }
        else {
            const topDiff = diffsQueue.dequeue();
            resultQueue.enqueue(diffsQueue.currentSide, topDiff);
            if (prevBaseHi < topDiff.baseHi) {
                diffsQueue.switchSides();
                return this.buildResultQueue(diffsQueue, topDiff.baseHi, resultQueue);
            }
            else {
                return this.buildResultQueue(diffsQueue, prevBaseHi, resultQueue);
            }
        }
    }
    queueIsFinished(queue, prevBaseHi) {
        return queue.length === 0 || queue[0].baseLo > prevBaseHi + 1;
    }
    determineDifference(diffDiffsQueue, initSide, finalSide) {
        const baseLo = diffDiffsQueue.get(initSide)[0].baseLo;
        const finalQueue = diffDiffsQueue.get(finalSide);
        const baseHi = finalQueue[finalQueue.length - 1].baseHi;
        const [leftLo, leftHi] = this.diffableEndpoints(diffDiffsQueue.get(Side.left), baseLo, baseHi);
        const [rightLo, rightHi] = this.diffableEndpoints(diffDiffsQueue.get(Side.right), baseLo, baseHi);
        const leftSubset = this.left.slice(leftLo - 1, leftHi);
        const rightSubset = this.right.slice(rightLo - 1, rightHi);
        const changeType = this.decideAction(diffDiffsQueue, leftSubset, rightSubset);
        return new Difference(changeType, leftLo, leftHi, rightLo, rightHi, baseLo, baseHi);
    }
    diffableEndpoints(commands, baseLo, baseHi) {
        if (commands.length) { //TODO
            const firstCommand = commands[0];
            const lastCommand = commands[commands.length - 1];
            const lo = firstCommand.sideLo - firstCommand.baseLo + baseLo;
            const hi = lastCommand.sideHi - lastCommand.baseHi + baseHi;
            return [lo, hi];
        }
        else {
            return [baseLo, baseHi];
        }
    }
    decideAction(diffDiffsQueue, leftSubset, rightSubset) {
        if (diffDiffsQueue.isEmpty(Side.left)) {
            return ChangeType.chooseRight;
        }
        else if (diffDiffsQueue.isEmpty(Side.right)) {
            return ChangeType.chooseLeft;
        }
        else {
            // leftSubset deepEquals rightSubset
            if (!leftSubset.every((x, i) => rightSubset[i] === x)) {
                return ChangeType.possibleConflict;
            }
            else {
                return ChangeType.noConflictFound;
            }
        }
    }
}
export class Difference {
    constructor(changeType, leftLo, leftHi, rightLo, rightHi, baseLo, baseHi) {
        this.changeType = changeType;
        this.leftLo = leftLo;
        this.leftHi = leftHi;
        this.rightLo = rightLo;
        this.rightHi = rightHi;
        this.baseLo = baseLo;
        this.baseHi = baseHi;
    }
}
export var ChangeType;
(function (ChangeType) {
    ChangeType["chooseRight"] = "choose_right";
    ChangeType["chooseLeft"] = "choose_left";
    ChangeType["possibleConflict"] = "possible_conflict";
    ChangeType["noConflictFound"] = "no_conflict_found";
})(ChangeType || (ChangeType = {}));
export var Side;
(function (Side) {
    Side["left"] = "left";
    Side["right"] = "right";
})(Side || (Side = {}));
export class DiffDoubleQueue {
    constructor(left = [], right = []) {
        this.diffs = { left: left, right: right };
    }
    dequeue(side = this.currentSide) {
        return this.diffs[side].shift();
    }
    peek(side = this.currentSide) {
        return this.diffs[side];
    }
    isFinished() {
        return this.isEmpty(Side.left) && this.isEmpty(Side.right);
    }
    enqueue(side = this.currentSide, val) {
        return this.diffs[side].push(val);
    }
    get(side = this.currentSide) {
        return this.diffs[side];
    }
    isEmpty(side = this.currentSide) {
        return this.diffs[side].length === 0;
    }
    switchSides(side = this.currentSide) {
        return this.currentSide = (side === Side.left) ? Side.right : Side.left;
    }
    chooseSide() {
        if (this.isEmpty(Side.left)) {
            this.currentSide = Side.right;
        }
        else if (this.isEmpty(Side.right)) {
            this.currentSide = Side.left;
        }
        else {
            this.currentSide = (this.get(Side.left)[0].baseLo <= this.get(Side.right)[0].baseLo ? Side.left : Side.right);
        }
        return this.currentSide;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlmZjMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2tldmluL3RyYXZhaWwvZGV2eC90aHJlZS13YXktbWVyZ2UvIiwic291cmNlcyI6WyJkaWZmMy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQThCLE1BQU0sZUFBZSxDQUFDO0FBRTNELE1BQU07SUFTSixZQUFtQixJQUFZLEVBQ1osTUFBYyxFQUNkLE1BQWMsRUFDZCxNQUFjLEVBQ2QsTUFBYztRQUpkLFNBQUksR0FBSixJQUFJLENBQVE7UUFDWixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQUcsQ0FBQztJQVpyQyxNQUFNLENBQUMsZUFBZSxDQUFDLFdBQXdCO1FBQzdDLE9BQU8sSUFBSSxZQUFZLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFDbEIsV0FBVyxDQUFDLE1BQU0sRUFDbEIsV0FBVyxDQUFDLE1BQU0sRUFDbEIsV0FBVyxDQUFDLE9BQU8sRUFDbkIsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9DLENBQUM7Q0FPRjtBQUVELE1BQU0sQ0FBQyxPQUFPO0lBS1osWUFBbUIsSUFBYyxFQUNkLElBQWMsRUFDZCxLQUFlO1FBRmYsU0FBSSxHQUFKLElBQUksQ0FBVTtRQUNkLFNBQUksR0FBSixJQUFJLENBQVU7UUFDZCxVQUFLLEdBQUwsS0FBSyxDQUFVO0lBQUcsQ0FBQztJQU50QyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQWMsRUFBRSxJQUFjLEVBQUUsS0FBZTtRQUNoRSxPQUFPLElBQUksS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDdkQsQ0FBQztJQU1ELGNBQWM7UUFDWixNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUs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Q0FBQyxDQUFDO1NBQy9HO1FBRUQsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEaWZmMiwgeyBDaGFuZ2VSYW5nZSwgQWN0aW9uIH0gZnJvbSAnLi9oZWNrZWwtZGlmZic7XG5cbmV4cG9ydCBjbGFzcyBEaWZmMkNvbW1hbmQge1xuICBzdGF0aWMgZnJvbUNoYW5nZVJhbmdlKGNoYW5nZVJhbmdlOiBDaGFuZ2VSYW5nZSkge1xuICAgIHJldHVybiBuZXcgRGlmZjJDb21tYW5kKGNoYW5nZVJhbmdlLmFjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VSYW5nZS5sZWZ0TG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlUmFuZ2UubGVmdEhpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZVJhbmdlLnJpZ2h0TG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlUmFuZ2UucmlnaHRIaSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgY29kZTogQWN0aW9uLFxuICAgICAgICAgICAgICBwdWJsaWMgYmFzZUxvOiBudW1iZXIsXG4gICAgICAgICAgICAgIHB1YmxpYyBiYXNlSGk6IG51bWJlcixcbiAgICAgICAgICAgICAgcHVibGljIHNpZGVMbzogbnVtYmVyLFxuICAgICAgICAgICAgICBwdWJsaWMgc2lkZUhpOiBudW1iZXIpIHt9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERpZmYzIHtcbiAgc3RhdGljIGV4ZWN1dGVEaWZmKGxlZnQ6IHN0cmluZ1tdLCBiYXNlOiBzdHJpbmdbXSwgcmlnaHQ6IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuIG5ldyBEaWZmMyhsZWZ0LCBiYXNlLCByaWdodCkuZ2V0RGlmZmVyZW5jZXMoKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBsZWZ0OiBzdHJpbmdbXSxcbiAgICAgICAgICAgICAgcHVibGljIGJhc2U6IHN0cmluZ1tdLFxuICAgICAgICAgICAgICBwdWJsaWMgcmlnaHQ6IHN0cmluZ1tdKSB7fVxuXG4gIGdldERpZmZlcmVuY2VzKCkge1xuICAgIGNvbnN0IGxlZnREaWZmID0gRGlmZjIuZGlmZih0aGlzLmJhc2UsIHRoaXMubGVmdCkubWFwKChkKSA9PiB7XG4gICAgICByZXR1cm4gRGlmZjJDb21tYW5kLmZyb21DaGFuZ2VSYW5nZShkKVxuICAgIH0pO1xuICAgIGNvbnN0IHJpZ2h0RGlmZiA9IERpZmYyLmRpZmYodGhpcy5iYXNlLCB0aGlzLnJpZ2h0KS5tYXAoKGQpID0+IHtcbiAgICAgIHJldHVybiBEaWZmMkNvbW1hbmQuZnJvbUNoYW5nZVJhbmdlKGQpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmNvbGxhcHNlRGlmZmVyZW5jZXMobmV3IERpZmZEb3VibGVRdWV1ZShsZWZ0RGlmZiwgcmlnaHREaWZmKSk7XG4gIH1cblxuICBjb2xsYXBzZURpZmZlcmVuY2VzKGRpZmZzUXVldWU6IERpZmZEb3VibGVRdWV1ZSwgZGlmZmVyZW5jZXM9PERpZmZlcmVuY2VbXT5bXSkgOiBEaWZmZXJlbmNlW10ge1xuICAgIGlmIChkaWZmc1F1ZXVlLmlzRmluaXNoZWQoKSkge1xuICAgICAgcmV0dXJuIGRpZmZlcmVuY2VzO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCByZXN1bHRRdWV1ZSA9IG5ldyBEaWZmRG91YmxlUXVldWUoKTtcbiAgICAgIGNvbnN0IGluaXRTaWRlID0gZGlmZnNRdWV1ZS5jaG9vc2VTaWRlKCk7XG4gICAgICBjb25zdCB0b3BEaWZmID0gPERpZmYyQ29tbWFuZD5kaWZmc1F1ZXVlLmRlcXVldWUoKTtcblxuICAgICAgcmVzdWx0UXVldWUuZW5xdWV1ZShpbml0U2lkZSwgdG9wRGlmZik7XG5cbiAgICAgIGRpZmZzUXVldWUuc3dpdGNoU2lkZXMoKTtcbiAgICAgIHRoaXMuYnVpbGRSZXN1bHRRdWV1ZShkaWZmc1F1ZXVlLCB0b3BEaWZmLmJhc2VIaSwgcmVzdWx0UXVldWUpO1xuXG4gICAgICBkaWZmZXJlbmNlcy5wdXNoKHRoaXMuZGV0ZXJtaW5lRGlmZmVyZW5jZShyZXN1bHRRdWV1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRTaWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZnNRdWV1ZS5zd2l0Y2hTaWRlcygpKSk7XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbGxhcHNlRGlmZmVyZW5jZXMoZGlmZnNRdWV1ZSwgZGlmZmVyZW5jZXMpO1xuICAgIH1cbiAgfVxuXG4gIGJ1aWxkUmVzdWx0UXVldWUoZGlmZnNRdWV1ZTogRGlmZkRvdWJsZVF1ZXVlLFxuICAgICAgICAgICAgICAgICAgIHByZXZCYXNlSGk6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICByZXN1bHRRdWV1ZTogRGlmZkRvdWJsZVF1ZXVlKSA6IERpZmZEb3VibGVRdWV1ZSB7XG4gICAgaWYgKHRoaXMucXVldWVJc0ZpbmlzaGVkKGRpZmZzUXVldWUucGVlaygpLCBwcmV2QmFzZUhpKSkge1xuICAgICAgcmV0dXJuIHJlc3VsdFF1ZXVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB0b3BEaWZmID0gPERpZmYyQ29tbWFuZD5kaWZmc1F1ZXVlLmRlcXVldWUoKTtcbiAgICAgIHJlc3VsdFF1ZXVlLmVucXVldWUoZGlmZnNRdWV1ZS5jdXJyZW50U2lkZSwgdG9wRGlmZik7XG5cbiAgICAgIGlmIChwcmV2QmFzZUhpIDwgdG9wRGlmZi5iYXNlSGkpIHtcbiAgICAgICAgZGlmZnNRdWV1ZS5zd2l0Y2hTaWRlcygpO1xuICAgICAgICByZXR1cm4gdGhpcy5idWlsZFJlc3VsdFF1ZXVlKGRpZmZzUXVldWUsIHRvcERpZmYuYmFzZUhpLCByZXN1bHRRdWV1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5idWlsZFJlc3VsdFF1ZXVlKGRpZmZzUXVldWUsIHByZXZCYXNlSGksIHJlc3VsdFF1ZXVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBxdWV1ZUlzRmluaXNoZWQocXVldWU6IERpZmYyQ29tbWFuZFtdLCBwcmV2QmFzZUhpOiBudW1iZXIpIHtcbiAgICByZXR1cm4gcXVldWUubGVuZ3RoID09PSAwIHx8IHF1ZXVlWzBdLmJhc2VMbyA+IHByZXZCYXNlSGkgKyAxO1xuICB9XG5cbiAgZGV0ZXJtaW5lRGlmZmVyZW5jZShkaWZmRGlmZnNRdWV1ZTogRGlmZkRvdWJsZVF1ZXVlLCBpbml0U2lkZTogU2lkZSwgZmluYWxTaWRlOiBTaWRlKSA6IERpZmZlcmVuY2Uge1xuICAgIGNvbnN0IGJhc2VMbyA9IGRpZmZEaWZmc1F1ZXVlLmdldChpbml0U2lkZSlbMF0uYmFzZUxvO1xuICAgIGNvbnN0IGZpbmFsUXVldWUgPSBkaWZmRGlmZnNRdWV1ZS5nZXQoZmluYWxTaWRlKTtcbiAgICBjb25zdCBiYXNlSGkgPSBmaW5hbFF1ZXVlW2ZpbmFsUXVldWUubGVuZ3RoIC0gMV0uYmFzZUhpO1xuXG4gICAgY29uc3QgW2xlZnRMbywgbGVmdEhpXSA9IHRoaXMuZGlmZmFibGVFbmRwb2ludHMoZGlmZkRpZmZzUXVldWUuZ2V0KFNpZGUubGVmdCksIGJhc2VMbywgYmFzZUhpKTtcbiAgICBjb25zdCBbcmlnaHRMbywgcmlnaHRIaV0gPSB0aGlzLmRpZmZhYmxlRW5kcG9pbnRzKGRpZmZEaWZmc1F1ZXVlLmdldChTaWRlLnJpZ2h0KSwgYmFzZUxvLCBiYXNlSGkpO1xuXG4gICAgY29uc3QgbGVmdFN1YnNldCA9IHRoaXMubGVmdC5zbGljZShsZWZ0TG8tMSwgbGVmdEhpKTtcbiAgICBjb25zdCByaWdodFN1YnNldCA9IHRoaXMucmlnaHQuc2xpY2UocmlnaHRMby0xLCByaWdodEhpKTtcbiAgICBjb25zdCBjaGFuZ2VUeXBlID0gdGhpcy5kZWNpZGVBY3Rpb24oZGlmZkRpZmZzUXVldWUsIGxlZnRTdWJzZXQsIHJpZ2h0U3Vic2V0KTtcblxuICAgIHJldHVybiBuZXcgRGlmZmVyZW5jZShjaGFuZ2VUeXBlLCBsZWZ0TG8sIGxlZnRIaSwgcmlnaHRMbywgcmlnaHRIaSwgYmFzZUxvLCBiYXNlSGkpO1xuICB9XG5cbiAgZGlmZmFibGVFbmRwb2ludHMoY29tbWFuZHM6IERpZmYyQ29tbWFuZFtdLCBiYXNlTG86IG51bWJlciwgYmFzZUhpOiBudW1iZXIpIHtcbiAgICBpZiAoY29tbWFuZHMubGVuZ3RoKSB7IC8vVE9ET1xuICAgICAgY29uc3QgZmlyc3RDb21tYW5kID0gY29tbWFuZHNbMF07XG4gICAgICBjb25zdCBsYXN0Q29tbWFuZCA9IGNvbW1hbmRzW2NvbW1hbmRzLmxlbmd0aCAtIDFdO1xuICAgICAgY29uc3QgbG8gPSBmaXJzdENvbW1hbmQuc2lkZUxvIC0gZmlyc3RDb21tYW5kLmJhc2VMbyArIGJhc2VMbztcbiAgICAgIGNvbnN0IGhpID0gbGFzdENvbW1hbmQuc2lkZUhpICAtIGxhc3RDb21tYW5kLmJhc2VIaSAgKyBiYXNlSGk7XG5cbiAgICAgIHJldHVybiBbbG8sIGhpXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtiYXNlTG8sIGJhc2VIaV07XG4gICAgfVxuICB9XG5cbiAgZGVjaWRlQWN0aW9uKGRpZmZEaWZmc1F1ZXVlOiBEaWZmRG91YmxlUXVldWUsXG4gICAgICAgICAgICAgICBsZWZ0U3Vic2V0OiBzdHJpbmdbXSxcbiAgICAgICAgICAgICAgIHJpZ2h0U3Vic2V0OiBzdHJpbmdbXSkge1xuICAgIGlmIChkaWZmRGlmZnNRdWV1ZS5pc0VtcHR5KFNpZGUubGVmdCkpIHtcbiAgICAgIHJldHVybiBDaGFuZ2VUeXBlLmNob29zZVJpZ2h0O1xuICAgIH0gZWxzZSBpZiAoZGlmZkRpZmZzUXVldWUuaXNFbXB0eShTaWRlLnJpZ2h0KSkge1xuICAgICAgcmV0dXJuIENoYW5nZVR5cGUuY2hvb3NlTGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbGVmdFN1YnNldCBkZWVwRXF1YWxzIHJpZ2h0U3Vic2V0XG4gICAgICBpZiAoIWxlZnRTdWJzZXQuZXZlcnkoKHgsIGkpID0+IHJpZ2h0U3Vic2V0W2ldID09PSB4KSkge1xuICAgICAgICByZXR1cm4gQ2hhbmdlVHlwZS5wb3NzaWJsZUNvbmZsaWN0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIENoYW5nZVR5cGUubm9Db25mbGljdEZvdW5kO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGlmZmVyZW5jZSB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBjaGFuZ2VUeXBlOiBDaGFuZ2VUeXBlLFxuICAgICAgICAgICAgICBwdWJsaWMgbGVmdExvOiBudW1iZXIsXG4gICAgICAgICAgICAgIHB1YmxpYyBsZWZ0SGk6IG51bWJlcixcbiAgICAgICAgICAgICAgcHVibGljIHJpZ2h0TG86IG51bWJlcixcbiAgICAgICAgICAgICAgcHVibGljIHJpZ2h0SGk6IG51bWJlcixcbiAgICAgICAgICAgICAgcHVibGljIGJhc2VMbzogbnVtYmVyLFxuICAgICAgICAgICAgICBwdWJsaWMgYmFzZUhpOiBudW1iZXIpIHt9XG59XG5cbmV4cG9ydCBlbnVtIENoYW5nZVR5cGUge1xuICBjaG9vc2VSaWdodCA9ICdjaG9vc2VfcmlnaHQnLFxuICBjaG9vc2VMZWZ0ID0gJ2Nob29zZV9sZWZ0JyxcbiAgcG9zc2libGVDb25mbGljdCA9ICdwb3NzaWJsZV9jb25mbGljdCcsXG4gIG5vQ29uZmxpY3RGb3VuZCA9ICdub19jb25mbGljdF9mb3VuZCdcbn1cblxuZXhwb3J0IGVudW0gU2lkZSB7XG4gIGxlZnQgPSBcImxlZnRcIixcbiAgcmlnaHQgPSBcInJpZ2h0XCJcbn1cblxuZXhwb3J0IGNsYXNzIERpZmZEb3VibGVRdWV1ZSB7XG4gIGN1cnJlbnRTaWRlOiBTaWRlO1xuICBkaWZmczogeyBbaW5kZXg6c3RyaW5nXSA6IERpZmYyQ29tbWFuZFtdIH07XG5cbiAgY29uc3RydWN0b3IobGVmdD08RGlmZjJDb21tYW5kW10+W10sIHJpZ2h0PTxEaWZmMkNvbW1hbmRbXT5bXSkge1xuICAgIHRoaXMuZGlmZnMgPSB7IGxlZnQ6IGxlZnQsIHJpZ2h0OiByaWdodCB9O1xuICB9XG5cbiAgZGVxdWV1ZShzaWRlPXRoaXMuY3VycmVudFNpZGUpIHtcbiAgICByZXR1cm4gdGhpcy5kaWZmc1tzaWRlXS5zaGlmdCgpO1xuICB9XG5cbiAgcGVlayhzaWRlPXRoaXMuY3VycmVudFNpZGUpIHtcbiAgICByZXR1cm4gdGhpcy5kaWZmc1tzaWRlXTtcbiAgfVxuXG4gIGlzRmluaXNoZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNFbXB0eShTaWRlLmxlZnQpICYmIHRoaXMuaXNFbXB0eShTaWRlLnJpZ2h0KTtcbiAgfVxuXG4gIGVucXVldWUoc2lkZT10aGlzLmN1cnJlbnRTaWRlLCB2YWw6IERpZmYyQ29tbWFuZCkge1xuICAgIHJldHVybiB0aGlzLmRpZmZzW3NpZGVdLnB1c2godmFsKTtcbiAgfVxuXG4gIGdldChzaWRlPXRoaXMuY3VycmVudFNpZGUpIHtcbiAgICByZXR1cm4gdGhpcy5kaWZmc1tzaWRlXTtcbiAgfVxuXG4gIGlzRW1wdHkoc2lkZT10aGlzLmN1cnJlbnRTaWRlKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlmZnNbc2lkZV0ubGVuZ3RoID09PSAwO1xuICB9XG5cbiAgc3dpdGNoU2lkZXMoc2lkZT10aGlzLmN1cnJlbnRTaWRlKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFNpZGUgPSAoc2lkZSA9PT0gU2lkZS5sZWZ0KSA/IFNpZGUucmlnaHQgOiBTaWRlLmxlZnQ7XG4gIH1cblxuICBjaG9vc2VTaWRlKCkge1xuICAgIGlmICh0aGlzLmlzRW1wdHkoU2lkZS5sZWZ0KSkge1xuICAgICAgdGhpcy5jdXJyZW50U2lkZSA9IFNpZGUucmlnaHQ7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzRW1wdHkoU2lkZS5yaWdodCkpIHtcbiAgICAgIHRoaXMuY3VycmVudFNpZGUgPSBTaWRlLmxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudFNpZGUgPSAodGhpcy5nZXQoU2lkZS5sZWZ0KVswXS5iYXNlTG8gPD0gdGhpcy5nZXQoU2lkZS5yaWdodClbMF0uYmFzZUxvID8gU2lkZS5sZWZ0IDogU2lkZS5yaWdodCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFNpZGU7XG4gIH1cbn1cbiJdfQ==