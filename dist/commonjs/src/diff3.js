"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const heckel_diff_1 = require("./heckel-diff");
class Diff2Command {
    constructor(code, baseLo, baseHi, sideLo, sideHi) {
        this.code = code;
        this.baseLo = baseLo;
        this.baseHi = baseHi;
        this.sideLo = sideLo;
        this.sideHi = sideHi;
    }
    static fromChangeRange(changeRange) {
        return new Diff2Command(changeRange.action, changeRange.leftLo, changeRange.leftHi, changeRange.rightLo, changeRange.rightHi);
    }
}
exports.Diff2Command = Diff2Command;
class Diff3 {
    constructor(left, base, right) {
        this.left = left;
        this.base = base;
        this.right = right;
    }
    static executeDiff(left, base, right) {
        return new Diff3(left, base, right).getDifferences();
    }
    getDifferences() {
        const leftDiff = heckel_diff_1.default.diff(this.base, this.left).map((d) => {
            return Diff2Command.fromChangeRange(d);
        });
        const rightDiff = heckel_diff_1.default.diff(this.base, this.right).map((d) => {
            return Diff2Command.fromChangeRange(d);
        });
        return this.collapseDifferences(new DiffDoubleQueue(leftDiff, rightDiff));
    }
    collapseDifferences(diffsQueue, differences = []) {
        if (diffsQueue.isFinished()) {
            return differences;
        }
        else {
            const resultQueue = new DiffDoubleQueue();
            const initSide = diffsQueue.chooseSide();
            const topDiff = diffsQueue.dequeue();
            resultQueue.enqueue(initSide, topDiff);
            diffsQueue.switchSides();
            this.buildResultQueue(diffsQueue, topDiff.baseHi, resultQueue);
            differences.push(this.determineDifference(resultQueue, initSide, diffsQueue.switchSides()));
            return this.collapseDifferences(diffsQueue, differences);
        }
    }
    buildResultQueue(diffsQueue, prevBaseHi, resultQueue) {
        if (this.queueIsFinished(diffsQueue.peek(), prevBaseHi)) {
            return resultQueue;
        }
        else {
            const topDiff = diffsQueue.dequeue();
            resultQueue.enqueue(diffsQueue.currentSide, topDiff);
            if (prevBaseHi < topDiff.baseHi) {
                diffsQueue.switchSides();
                return this.buildResultQueue(diffsQueue, topDiff.baseHi, resultQueue);
            }
            else {
                return this.buildResultQueue(diffsQueue, prevBaseHi, resultQueue);
            }
        }
    }
    queueIsFinished(queue, prevBaseHi) {
        return queue.length === 0 || queue[0].baseLo > prevBaseHi + 1;
    }
    determineDifference(diffDiffsQueue, initSide, finalSide) {
        const baseLo = diffDiffsQueue.get(initSide)[0].baseLo;
        const finalQueue = diffDiffsQueue.get(finalSide);
        const baseHi = finalQueue[finalQueue.length - 1].baseHi;
        const [leftLo, leftHi] = this.diffableEndpoints(diffDiffsQueue.get(Side.left), baseLo, baseHi);
        const [rightLo, rightHi] = this.diffableEndpoints(diffDiffsQueue.get(Side.right), baseLo, baseHi);
        const leftSubset = this.left.slice(leftLo - 1, leftHi);
        const rightSubset = this.right.slice(rightLo - 1, rightHi);
        const changeType = this.decideAction(diffDiffsQueue, leftSubset, rightSubset);
        return new Difference(changeType, leftLo, leftHi, rightLo, rightHi, baseLo, baseHi);
    }
    diffableEndpoints(commands, baseLo, baseHi) {
        if (commands.length) { //TODO
            const firstCommand = commands[0];
            const lastCommand = commands[commands.length - 1];
            const lo = firstCommand.sideLo - firstCommand.baseLo + baseLo;
            const hi = lastCommand.sideHi - lastCommand.baseHi + baseHi;
            return [lo, hi];
        }
        else {
            return [baseLo, baseHi];
        }
    }
    decideAction(diffDiffsQueue, leftSubset, rightSubset) {
        if (diffDiffsQueue.isEmpty(Side.left)) {
            return ChangeType.chooseRight;
        }
        else if (diffDiffsQueue.isEmpty(Side.right)) {
            return ChangeType.chooseLeft;
        }
        else {
            // leftSubset deepEquals rightSubset
            if (!leftSubset.every((x, i) => rightSubset[i] === x)) {
                return ChangeType.possibleConflict;
            }
            else {
                return ChangeType.noConflictFound;
            }
        }
    }
}
exports.default = Diff3;
class Difference {
    constructor(changeType, leftLo, leftHi, rightLo, rightHi, baseLo, baseHi) {
        this.changeType = changeType;
        this.leftLo = leftLo;
        this.leftHi = leftHi;
        this.rightLo = rightLo;
        this.rightHi = rightHi;
        this.baseLo = baseLo;
        this.baseHi = baseHi;
    }
}
exports.Difference = Difference;
var ChangeType;
(function (ChangeType) {
    ChangeType["chooseRight"] = "choose_right";
    ChangeType["chooseLeft"] = "choose_left";
    ChangeType["possibleConflict"] = "possible_conflict";
    ChangeType["noConflictFound"] = "no_conflict_found";
})(ChangeType = exports.ChangeType || (exports.ChangeType = {}));
var Side;
(function (Side) {
    Side["left"] = "left";
    Side["right"] = "right";
})(Side = exports.Side || (exports.Side = {}));
class DiffDoubleQueue {
    constructor(left = [], right = []) {
        this.diffs = { left: left, right: right };
    }
    dequeue(side = this.currentSide) {
        return this.diffs[side].shift();
    }
    peek(side = this.currentSide) {
        return this.diffs[side];
    }
    isFinished() {
        return this.isEmpty(Side.left) && this.isEmpty(Side.right);
    }
    enqueue(side = this.currentSide, val) {
        return this.diffs[side].push(val);
    }
    get(side = this.currentSide) {
        return this.diffs[side];
    }
    isEmpty(side = this.currentSide) {
        return this.diffs[side].length === 0;
    }
    switchSides(side = this.currentSide) {
        return this.currentSide = (side === Side.left) ? Side.right : Side.left;
    }
    chooseSide() {
        if (this.isEmpty(Side.left)) {
            this.currentSide = Side.right;
        }
        else if (this.isEmpty(Side.right)) {
            this.currentSide = Side.left;
        }
        else {
            this.currentSide = (this.get(Side.left)[0].baseLo <= this.get(Side.right)[0].baseLo ? Side.left : Side.right);
        }
        return this.currentSide;
    }
}
exports.DiffDoubleQueue = DiffDoubleQueue;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlmZjMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2tldmluL3RyYXZhaWwvZGV2eC90aHJlZS13YXktbWVyZ2UvIiwic291cmNlcyI6WyJkaWZmMy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUEyRDtBQUUzRDtJQVNFLFlBQW1CLElBQVksRUFDWixNQUFjLEVBQ2QsTUFBYyxFQUNkLE1BQWMsRUFDZCxNQUFjO1FBSmQsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUNaLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLFdBQU0sR0FBTixNQUFNLENBQVE7SUFBRyxDQUFDO0lBWnJDLE1BQU0sQ0FBQyxlQUFlLENBQUMsV0FBd0I7UUFDN0MsT0FBTyxJQUFJLFlBQVksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUNsQixXQUFXLENBQUMsTUFBTSxFQUNsQixXQUFXLENBQUMsTUFBTSxFQUNsQixXQUFXLENBQUMsT0FBTyxFQUNuQixXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0MsQ0FBQztDQU9GO0FBZEQsb0NBY0M7QUFFRDtJQUtFLFlBQW1CLElBQWMsRUFDZCxJQUFjLEVBQ2QsS0FBZTtRQUZmLFNBQUksR0FBSixJQUFJLENBQVU7UUFDZCxTQUFJLEdBQUosSUFBSSxDQUFVO1FBQ2QsVUFBSyxHQUFMLEtBQUssQ0FBVTtJQUFHLENBQUM7SUFOdEMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFjLEVBQUUsSUFBYyxFQUFFLEtBQWU7UUFDaEUsT0FBTyxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3ZELENBQUM7SUFNRCxjQUFjO1FBQ1osTUFBTSxRQUFRLEdBQUcscUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMs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QztTQUMvRztRQUVELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0NBQ0Y7QUEvQ0QsMENBK0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERpZmYyLCB7IENoYW5nZVJhbmdlLCBBY3Rpb24gfSBmcm9tICcuL2hlY2tlbC1kaWZmJztcblxuZXhwb3J0IGNsYXNzIERpZmYyQ29tbWFuZCB7XG4gIHN0YXRpYyBmcm9tQ2hhbmdlUmFuZ2UoY2hhbmdlUmFuZ2U6IENoYW5nZVJhbmdlKSB7XG4gICAgcmV0dXJuIG5ldyBEaWZmMkNvbW1hbmQoY2hhbmdlUmFuZ2UuYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZVJhbmdlLmxlZnRMbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VSYW5nZS5sZWZ0SGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlUmFuZ2UucmlnaHRMbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VSYW5nZS5yaWdodEhpKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBjb2RlOiBBY3Rpb24sXG4gICAgICAgICAgICAgIHB1YmxpYyBiYXNlTG86IG51bWJlcixcbiAgICAgICAgICAgICAgcHVibGljIGJhc2VIaTogbnVtYmVyLFxuICAgICAgICAgICAgICBwdWJsaWMgc2lkZUxvOiBudW1iZXIsXG4gICAgICAgICAgICAgIHB1YmxpYyBzaWRlSGk6IG51bWJlcikge31cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGlmZjMge1xuICBzdGF0aWMgZXhlY3V0ZURpZmYobGVmdDogc3RyaW5nW10sIGJhc2U6IHN0cmluZ1tdLCByaWdodDogc3RyaW5nW10pIHtcbiAgICByZXR1cm4gbmV3IERpZmYzKGxlZnQsIGJhc2UsIHJpZ2h0KS5nZXREaWZmZXJlbmNlcygpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHVibGljIGxlZnQ6IHN0cmluZ1tdLFxuICAgICAgICAgICAgICBwdWJsaWMgYmFzZTogc3RyaW5nW10sXG4gICAgICAgICAgICAgIHB1YmxpYyByaWdodDogc3RyaW5nW10pIHt9XG5cbiAgZ2V0RGlmZmVyZW5jZXMoKSB7XG4gICAgY29uc3QgbGVmdERpZmYgPSBEaWZmMi5kaWZmKHRoaXMuYmFzZSwgdGhpcy5sZWZ0KS5tYXAoKGQpID0+IHtcbiAgICAgIHJldHVybiBEaWZmMkNvbW1hbmQuZnJvbUNoYW5nZVJhbmdlKGQpXG4gICAgfSk7XG4gICAgY29uc3QgcmlnaHREaWZmID0gRGlmZjIuZGlmZih0aGlzLmJhc2UsIHRoaXMucmlnaHQpLm1hcCgoZCkgPT4ge1xuICAgICAgcmV0dXJuIERpZmYyQ29tbWFuZC5mcm9tQ2hhbmdlUmFuZ2UoZCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuY29sbGFwc2VEaWZmZXJlbmNlcyhuZXcgRGlmZkRvdWJsZVF1ZXVlKGxlZnREaWZmLCByaWdodERpZmYpKTtcbiAgfVxuXG4gIGNvbGxhcHNlRGlmZmVyZW5jZXMoZGlmZnNRdWV1ZTogRGlmZkRvdWJsZVF1ZXVlLCBkaWZmZXJlbmNlcz08RGlmZmVyZW5jZVtdPltdKSA6IERpZmZlcmVuY2VbXSB7XG4gICAgaWYgKGRpZmZzUXVldWUuaXNGaW5pc2hlZCgpKSB7XG4gICAgICByZXR1cm4gZGlmZmVyZW5jZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJlc3VsdFF1ZXVlID0gbmV3IERpZmZEb3VibGVRdWV1ZSgpO1xuICAgICAgY29uc3QgaW5pdFNpZGUgPSBkaWZmc1F1ZXVlLmNob29zZVNpZGUoKTtcbiAgICAgIGNvbnN0IHRvcERpZmYgPSA8RGlmZjJDb21tYW5kPmRpZmZzUXVldWUuZGVxdWV1ZSgpO1xuXG4gICAgICByZXN1bHRRdWV1ZS5lbnF1ZXVlKGluaXRTaWRlLCB0b3BEaWZmKTtcblxuICAgICAgZGlmZnNRdWV1ZS5zd2l0Y2hTaWRlcygpO1xuICAgICAgdGhpcy5idWlsZFJlc3VsdFF1ZXVlKGRpZmZzUXVldWUsIHRvcERpZmYuYmFzZUhpLCByZXN1bHRRdWV1ZSk7XG5cbiAgICAgIGRpZmZlcmVuY2VzLnB1c2godGhpcy5kZXRlcm1pbmVEaWZmZXJlbmNlKHJlc3VsdFF1ZXVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFNpZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWZmc1F1ZXVlLnN3aXRjaFNpZGVzKCkpKTtcblxuICAgICAgcmV0dXJuIHRoaXMuY29sbGFwc2VEaWZmZXJlbmNlcyhkaWZmc1F1ZXVlLCBkaWZmZXJlbmNlcyk7XG4gICAgfVxuICB9XG5cbiAgYnVpbGRSZXN1bHRRdWV1ZShkaWZmc1F1ZXVlOiBEaWZmRG91YmxlUXVldWUsXG4gICAgICAgICAgICAgICAgICAgcHJldkJhc2VIaTogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgIHJlc3VsdFF1ZXVlOiBEaWZmRG91YmxlUXVldWUpIDogRGlmZkRvdWJsZVF1ZXVlIHtcbiAgICBpZiAodGhpcy5xdWV1ZUlzRmluaXNoZWQoZGlmZnNRdWV1ZS5wZWVrKCksIHByZXZCYXNlSGkpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0UXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHRvcERpZmYgPSA8RGlmZjJDb21tYW5kPmRpZmZzUXVldWUuZGVxdWV1ZSgpO1xuICAgICAgcmVzdWx0UXVldWUuZW5xdWV1ZShkaWZmc1F1ZXVlLmN1cnJlbnRTaWRlLCB0b3BEaWZmKTtcblxuICAgICAgaWYgKHByZXZCYXNlSGkgPCB0b3BEaWZmLmJhc2VIaSkge1xuICAgICAgICBkaWZmc1F1ZXVlLnN3aXRjaFNpZGVzKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1aWxkUmVzdWx0UXVldWUoZGlmZnNRdWV1ZSwgdG9wRGlmZi5iYXNlSGksIHJlc3VsdFF1ZXVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1aWxkUmVzdWx0UXVldWUoZGlmZnNRdWV1ZSwgcHJldkJhc2VIaSwgcmVzdWx0UXVldWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHF1ZXVlSXNGaW5pc2hlZChxdWV1ZTogRGlmZjJDb21tYW5kW10sIHByZXZCYXNlSGk6IG51bWJlcikge1xuICAgIHJldHVybiBxdWV1ZS5sZW5ndGggPT09IDAgfHwgcXVldWVbMF0uYmFzZUxvID4gcHJldkJhc2VIaSArIDE7XG4gIH1cblxuICBkZXRlcm1pbmVEaWZmZXJlbmNlKGRpZmZEaWZmc1F1ZXVlOiBEaWZmRG91YmxlUXVldWUsIGluaXRTaWRlOiBTaWRlLCBmaW5hbFNpZGU6IFNpZGUpIDogRGlmZmVyZW5jZSB7XG4gICAgY29uc3QgYmFzZUxvID0gZGlmZkRpZmZzUXVldWUuZ2V0KGluaXRTaWRlKVswXS5iYXNlTG87XG4gICAgY29uc3QgZmluYWxRdWV1ZSA9IGRpZmZEaWZmc1F1ZXVlLmdldChmaW5hbFNpZGUpO1xuICAgIGNvbnN0IGJhc2VIaSA9IGZpbmFsUXVldWVbZmluYWxRdWV1ZS5sZW5ndGggLSAxXS5iYXNlSGk7XG5cbiAgICBjb25zdCBbbGVmdExvLCBsZWZ0SGldID0gdGhpcy5kaWZmYWJsZUVuZHBvaW50cyhkaWZmRGlmZnNRdWV1ZS5nZXQoU2lkZS5sZWZ0KSwgYmFzZUxvLCBiYXNlSGkpO1xuICAgIGNvbnN0IFtyaWdodExvLCByaWdodEhpXSA9IHRoaXMuZGlmZmFibGVFbmRwb2ludHMoZGlmZkRpZmZzUXVldWUuZ2V0KFNpZGUucmlnaHQpLCBiYXNlTG8sIGJhc2VIaSk7XG5cbiAgICBjb25zdCBsZWZ0U3Vic2V0ID0gdGhpcy5sZWZ0LnNsaWNlKGxlZnRMby0xLCBsZWZ0SGkpO1xuICAgIGNvbnN0IHJpZ2h0U3Vic2V0ID0gdGhpcy5yaWdodC5zbGljZShyaWdodExvLTEsIHJpZ2h0SGkpO1xuICAgIGNvbnN0IGNoYW5nZVR5cGUgPSB0aGlzLmRlY2lkZUFjdGlvbihkaWZmRGlmZnNRdWV1ZSwgbGVmdFN1YnNldCwgcmlnaHRTdWJzZXQpO1xuXG4gICAgcmV0dXJuIG5ldyBEaWZmZXJlbmNlKGNoYW5nZVR5cGUsIGxlZnRMbywgbGVmdEhpLCByaWdodExvLCByaWdodEhpLCBiYXNlTG8sIGJhc2VIaSk7XG4gIH1cblxuICBkaWZmYWJsZUVuZHBvaW50cyhjb21tYW5kczogRGlmZjJDb21tYW5kW10sIGJhc2VMbzogbnVtYmVyLCBiYXNlSGk6IG51bWJlcikge1xuICAgIGlmIChjb21tYW5kcy5sZW5ndGgpIHsgLy9UT0RPXG4gICAgICBjb25zdCBmaXJzdENvbW1hbmQgPSBjb21tYW5kc1swXTtcbiAgICAgIGNvbnN0IGxhc3RDb21tYW5kID0gY29tbWFuZHNbY29tbWFuZHMubGVuZ3RoIC0gMV07XG4gICAgICBjb25zdCBsbyA9IGZpcnN0Q29tbWFuZC5zaWRlTG8gLSBmaXJzdENvbW1hbmQuYmFzZUxvICsgYmFzZUxvO1xuICAgICAgY29uc3QgaGkgPSBsYXN0Q29tbWFuZC5zaWRlSGkgIC0gbGFzdENvbW1hbmQuYmFzZUhpICArIGJhc2VIaTtcblxuICAgICAgcmV0dXJuIFtsbywgaGldO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW2Jhc2VMbywgYmFzZUhpXTtcbiAgICB9XG4gIH1cblxuICBkZWNpZGVBY3Rpb24oZGlmZkRpZmZzUXVldWU6IERpZmZEb3VibGVRdWV1ZSxcbiAgICAgICAgICAgICAgIGxlZnRTdWJzZXQ6IHN0cmluZ1tdLFxuICAgICAgICAgICAgICAgcmlnaHRTdWJzZXQ6IHN0cmluZ1tdKSB7XG4gICAgaWYgKGRpZmZEaWZmc1F1ZXVlLmlzRW1wdHkoU2lkZS5sZWZ0KSkge1xuICAgICAgcmV0dXJuIENoYW5nZVR5cGUuY2hvb3NlUmlnaHQ7XG4gICAgfSBlbHNlIGlmIChkaWZmRGlmZnNRdWV1ZS5pc0VtcHR5KFNpZGUucmlnaHQpKSB7XG4gICAgICByZXR1cm4gQ2hhbmdlVHlwZS5jaG9vc2VMZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBsZWZ0U3Vic2V0IGRlZXBFcXVhbHMgcmlnaHRTdWJzZXRcbiAgICAgIGlmICghbGVmdFN1YnNldC5ldmVyeSgoeCwgaSkgPT4gcmlnaHRTdWJzZXRbaV0gPT09IHgpKSB7XG4gICAgICAgIHJldHVybiBDaGFuZ2VUeXBlLnBvc3NpYmxlQ29uZmxpY3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gQ2hhbmdlVHlwZS5ub0NvbmZsaWN0Rm91bmQ7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEaWZmZXJlbmNlIHtcbiAgY29uc3RydWN0b3IocHVibGljIGNoYW5nZVR5cGU6IENoYW5nZVR5cGUsXG4gICAgICAgICAgICAgIHB1YmxpYyBsZWZ0TG86IG51bWJlcixcbiAgICAgICAgICAgICAgcHVibGljIGxlZnRIaTogbnVtYmVyLFxuICAgICAgICAgICAgICBwdWJsaWMgcmlnaHRMbzogbnVtYmVyLFxuICAgICAgICAgICAgICBwdWJsaWMgcmlnaHRIaTogbnVtYmVyLFxuICAgICAgICAgICAgICBwdWJsaWMgYmFzZUxvOiBudW1iZXIsXG4gICAgICAgICAgICAgIHB1YmxpYyBiYXNlSGk6IG51bWJlcikge31cbn1cblxuZXhwb3J0IGVudW0gQ2hhbmdlVHlwZSB7XG4gIGNob29zZVJpZ2h0ID0gJ2Nob29zZV9yaWdodCcsXG4gIGNob29zZUxlZnQgPSAnY2hvb3NlX2xlZnQnLFxuICBwb3NzaWJsZUNvbmZsaWN0ID0gJ3Bvc3NpYmxlX2NvbmZsaWN0JyxcbiAgbm9Db25mbGljdEZvdW5kID0gJ25vX2NvbmZsaWN0X2ZvdW5kJ1xufVxuXG5leHBvcnQgZW51bSBTaWRlIHtcbiAgbGVmdCA9IFwibGVmdFwiLFxuICByaWdodCA9IFwicmlnaHRcIlxufVxuXG5leHBvcnQgY2xhc3MgRGlmZkRvdWJsZVF1ZXVlIHtcbiAgY3VycmVudFNpZGU6IFNpZGU7XG4gIGRpZmZzOiB7IFtpbmRleDpzdHJpbmddIDogRGlmZjJDb21tYW5kW10gfTtcblxuICBjb25zdHJ1Y3RvcihsZWZ0PTxEaWZmMkNvbW1hbmRbXT5bXSwgcmlnaHQ9PERpZmYyQ29tbWFuZFtdPltdKSB7XG4gICAgdGhpcy5kaWZmcyA9IHsgbGVmdDogbGVmdCwgcmlnaHQ6IHJpZ2h0IH07XG4gIH1cblxuICBkZXF1ZXVlKHNpZGU9dGhpcy5jdXJyZW50U2lkZSkge1xuICAgIHJldHVybiB0aGlzLmRpZmZzW3NpZGVdLnNoaWZ0KCk7XG4gIH1cblxuICBwZWVrKHNpZGU9dGhpcy5jdXJyZW50U2lkZSkge1xuICAgIHJldHVybiB0aGlzLmRpZmZzW3NpZGVdO1xuICB9XG5cbiAgaXNGaW5pc2hlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc0VtcHR5KFNpZGUubGVmdCkgJiYgdGhpcy5pc0VtcHR5KFNpZGUucmlnaHQpO1xuICB9XG5cbiAgZW5xdWV1ZShzaWRlPXRoaXMuY3VycmVudFNpZGUsIHZhbDogRGlmZjJDb21tYW5kKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlmZnNbc2lkZV0ucHVzaCh2YWwpO1xuICB9XG5cbiAgZ2V0KHNpZGU9dGhpcy5jdXJyZW50U2lkZSkge1xuICAgIHJldHVybiB0aGlzLmRpZmZzW3NpZGVdO1xuICB9XG5cbiAgaXNFbXB0eShzaWRlPXRoaXMuY3VycmVudFNpZGUpIHtcbiAgICByZXR1cm4gdGhpcy5kaWZmc1tzaWRlXS5sZW5ndGggPT09IDA7XG4gIH1cblxuICBzd2l0Y2hTaWRlcyhzaWRlPXRoaXMuY3VycmVudFNpZGUpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50U2lkZSA9IChzaWRlID09PSBTaWRlLmxlZnQpID8gU2lkZS5yaWdodCA6IFNpZGUubGVmdDtcbiAgfVxuXG4gIGNob29zZVNpZGUoKSB7XG4gICAgaWYgKHRoaXMuaXNFbXB0eShTaWRlLmxlZnQpKSB7XG4gICAgICB0aGlzLmN1cnJlbnRTaWRlID0gU2lkZS5yaWdodDtcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNFbXB0eShTaWRlLnJpZ2h0KSkge1xuICAgICAgdGhpcy5jdXJyZW50U2lkZSA9IFNpZGUubGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jdXJyZW50U2lkZSA9ICh0aGlzLmdldChTaWRlLmxlZnQpWzBdLmJhc2VMbyA8PSB0aGlzLmdldChTaWRlLnJpZ2h0KVswXS5iYXNlTG8gPyBTaWRlLmxlZnQgOiBTaWRlLnJpZ2h0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jdXJyZW50U2lkZTtcbiAgfVxufVxuIl19