"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const outcomes_1 = require("./outcomes");
const diff3_1 = require("./diff3");
const heckel_diff_1 = require("./heckel-diff");
class Merger {
    static merge(left, base, right) {
        const merger = new Merger(left, base, right);
        merger.executeThreeWayMerge();
        return merger.result;
    }
    constructor(left, base, right) {
        this.result = [];
        this.text3 = new Text3(left, base, right);
    }
    executeThreeWayMerge() {
        const differences = diff3_1.default.executeDiff(this.text3.left, this.text3.base, this.text3.right);
        let index = 1;
        differences.forEach((difference) => {
            let initialText = [];
            for (let lineno = index; lineno < difference.baseLo; lineno++) {
                initialText.push(this.text3.base[lineno - 1]);
            }
            if (initialText.length) {
                this.result.push(new outcomes_1.Resolved(initialText));
            }
            this.interpretChunk(difference);
            index = difference.baseHi + 1;
        });
        const endingText = this.accumulateLines(index, this.text3.base.length, this.text3.base);
        if (endingText.length) {
            this.result.push(new outcomes_1.Resolved(endingText));
        }
    }
    setConflict(difference) {
        const conflict = outcomes_1.Conflicted.create({
            left: this.accumulateLines(difference.leftLo, difference.leftHi, this.text3.left),
            base: this.accumulateLines(difference.baseLo, difference.baseHi, this.text3.base),
            right: this.accumulateLines(difference.rightLo, difference.rightHi, this.text3.right)
        });
        this.result.push(conflict);
    }
    determineConflict(d, left, right) {
        let ia = 1;
        d.forEach((changeRange) => {
            for (let lineno = ia; lineno <= changeRange.leftLo; lineno++) {
                this.result.push(new outcomes_1.Resolved(this.accumulateLines(ia, lineno, right)));
            }
            const outcome = this.determineOutcome(changeRange, left, right);
            ia = changeRange.rightHi + 1;
            if (outcome) {
                this.result.push(outcome);
            }
        });
        let finalText = this.accumulateLines(ia, right.length + 1, right);
        if (finalText.length) {
            this.result.push(new outcomes_1.Resolved(finalText));
        }
    }
    determineOutcome(changeRange, left, right) {
        if (changeRange.action === heckel_diff_1.Action.change) {
            return outcomes_1.Conflicted.create({
                left: this.accumulateLines(changeRange.rightLo, changeRange.rightHi, left),
                right: this.accumulateLines(changeRange.leftLo, changeRange.leftHi, right),
                base: []
            });
        }
        else if (changeRange.action === heckel_diff_1.Action.add) {
            return new outcomes_1.Resolved(this.accumulateLines(changeRange.rightLo, changeRange.rightHi, left));
        }
        else {
            return null;
        }
    }
    setText(origText, lo, hi) {
        let text = [];
        for (let i = lo; i <= hi; i++) {
            text.push(origText[i - 1]);
        }
        return text;
    }
    _conflictRange(difference) {
        const right = this.setText(this.text3.right, difference.rightLo, difference.rightHi);
        const left = this.setText(this.text3.left, difference.leftLo, difference.leftHi);
        const d = heckel_diff_1.default.diff(right, left);
        if ((this._assocRange(d, heckel_diff_1.Action.change) || this._assocRange(d, heckel_diff_1.Action.remove)) &&
            difference.baseLo <= difference.baseHi) {
            this.setConflict(difference);
        }
        else {
            this.determineConflict(d, left, right);
        }
    }
    interpretChunk(difference) {
        if (difference.changeType == diff3_1.ChangeType.chooseLeft) {
            const tempText = this.accumulateLines(difference.leftLo, difference.leftHi, this.text3.left);
            if (tempText.length) {
                this.result.push(new outcomes_1.Resolved(tempText));
            }
        }
        else if (difference.changeType !== diff3_1.ChangeType.possibleConflict) {
            const tempText = this.accumulateLines(difference.rightLo, difference.rightHi, this.text3.right);
            if (tempText.length) {
                this.result.push(new outcomes_1.Resolved(tempText));
            }
        }
        else {
            this._conflictRange(difference);
        }
    }
    _assocRange(diff, action) {
        for (let i = 0; i < diff.length; i++) {
            let d = diff[i];
            if (d.action === action) {
                return d;
            }
        }
        return null;
    }
    accumulateLines(lo, hi, text) {
        let lines = [];
        for (let lineno = lo; lineno <= hi; lineno++) {
            if (text[lineno - 1]) {
                lines.push(text[lineno - 1]);
            }
        }
        return lines;
    }
}
exports.default = Merger;
class Text3 {
    constructor(left, base, right) {
        this.left = left;
        this.base = base;
        this.right = right;
    }
}
exports.Text3 = Text3;
//# sourceMappingURL=data:application/json;base64,