import Merger from './merger';
import Collater from './collater';
import resolver from './resolver';
const defaultJoinFunction = (a) => a.join('\n');
const defaultSplitFunction = (s) => s.split('\n');
const defaultConflictFunction = resolver('<<<<<<< CURRENT CHANGES', '=======', '>>>>>>> INCOMING CHANGES', defaultJoinFunction);
const defaultOptions = {
    splitFunction: defaultSplitFunction,
    joinFunction: defaultJoinFunction,
    conflictFunction: defaultConflictFunction
};
export default function merge(left, base, right, options = {}) {
    options = Object.assign({}, defaultOptions, options);
    const [splitLeft, splitBase, splitRight] = [left, base, right].map((t) => {
        return options.splitFunction.call(options, t);
    });
    const mergeResult = Merger.merge(splitLeft, splitBase, splitRight);
    const collatedMergeResults = Collater.collateMerge(mergeResult, options.joinFunction, options.conflictFunction);
    return collatedMergeResults;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhyZWUtd2F5LW1lcmdlLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9rZXZpbi90cmF2YWlsL2RldngvdGhyZWUtd2F5LW1lcmdlLyIsInNvdXJjZXMiOlsidGhyZWUtd2F5LW1lcmdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUU5QixPQUFPLFFBQTBDLE1BQU0sWUFBWSxDQUFDO0FBQ3BFLE9BQU8sUUFBUSxNQUFNLFlBQVksQ0FBQztBQUVsQyxNQUFNLG1CQUFtQixHQUFHLENBQUMsQ0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzFELE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxDQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDMUQsTUFBTSx1QkFBdUIsR0FBRyxRQUFRLENBQUMseUJBQXlCLEVBQ3pCLFNBQVMsRUFDVCwwQkFBMEIsRUFDMUIsbUJBQW1CLENBQUMsQ0FBQztBQUU5RCxNQUFNLGNBQWMsR0FBRztJQUNyQixhQUFhLEVBQUUsb0JBQW9CO0lBQ25DLFlBQVksRUFBRSxtQkFBbUI7SUFDakMsZ0JBQWdCLEVBQUUsdUJBQXVCO0NBQzFDLENBQUM7QUFRRixNQUFNLENBQUMsT0FBTyxnQkFBZ0IsSUFBWSxFQUNaLElBQVksRUFDWixLQUFhLEVBQ2IsT0FBTyxHQUFjLEVBQUU7SUFDbkQsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUVyRCxNQUFNLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDdkUsT0FBTyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDbkUsTUFBTSxvQkFBb0IsR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBRWhILE9BQU8sb0JBQW9CLENBQUM7QUFDOUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNZXJnZXIgZnJvbSAnLi9tZXJnZXInO1xuaW1wb3J0IE1lcmdlUmVzdWx0IGZyb20gJy4vbWVyZ2UtcmVzdWx0JztcbmltcG9ydCBDb2xsYXRlciwge0pvaW5GdW5jdGlvbiwgQ29uZmxpY3RGdW5jdGlvbn0gZnJvbSAnLi9jb2xsYXRlcic7XG5pbXBvcnQgcmVzb2x2ZXIgZnJvbSAnLi9yZXNvbHZlcic7XG5cbmNvbnN0IGRlZmF1bHRKb2luRnVuY3Rpb24gPSAoYTogc3RyaW5nW10pID0+IGEuam9pbignXFxuJyk7XG5jb25zdCBkZWZhdWx0U3BsaXRGdW5jdGlvbiA9IChzOiBzdHJpbmcpID0+IHMuc3BsaXQoJ1xcbicpO1xuY29uc3QgZGVmYXVsdENvbmZsaWN0RnVuY3Rpb24gPSByZXNvbHZlcignPDw8PDw8PCBDVVJSRU5UIENIQU5HRVMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPT09PT09PScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc+Pj4+Pj4+IElOQ09NSU5HIENIQU5HRVMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Sm9pbkZ1bmN0aW9uKTtcblxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIHNwbGl0RnVuY3Rpb246IGRlZmF1bHRTcGxpdEZ1bmN0aW9uLFxuICBqb2luRnVuY3Rpb246IGRlZmF1bHRKb2luRnVuY3Rpb24sXG4gIGNvbmZsaWN0RnVuY3Rpb246IGRlZmF1bHRDb25mbGljdEZ1bmN0aW9uXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIERpZmZPcHRpb25zIHtcbiAgc3BsaXRGdW5jdGlvbjogKHM6IHN0cmluZykgPT4gc3RyaW5nW10sXG4gIGpvaW5GdW5jdGlvbjogSm9pbkZ1bmN0aW9uLFxuICBjb25mbGljdEZ1bmN0aW9uOiBDb25mbGljdEZ1bmN0aW9uXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlKGxlZnQ6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhc2U6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zPTxEaWZmT3B0aW9ucz57fSkgOiBNZXJnZVJlc3VsdCB7XG4gIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgY29uc3QgW3NwbGl0TGVmdCwgc3BsaXRCYXNlLCBzcGxpdFJpZ2h0XSA9IFtsZWZ0LCBiYXNlLCByaWdodF0ubWFwKCh0KSA9PiB7XG4gICAgcmV0dXJuIG9wdGlvbnMuc3BsaXRGdW5jdGlvbi5jYWxsKG9wdGlvbnMsIHQpO1xuICB9KTtcblxuICBjb25zdCBtZXJnZVJlc3VsdCA9IE1lcmdlci5tZXJnZShzcGxpdExlZnQsIHNwbGl0QmFzZSwgc3BsaXRSaWdodCk7XG4gIGNvbnN0IGNvbGxhdGVkTWVyZ2VSZXN1bHRzID0gQ29sbGF0ZXIuY29sbGF0ZU1lcmdlKG1lcmdlUmVzdWx0LCBvcHRpb25zLmpvaW5GdW5jdGlvbiwgb3B0aW9ucy5jb25mbGljdEZ1bmN0aW9uKTtcblxuICByZXR1cm4gY29sbGF0ZWRNZXJnZVJlc3VsdHM7XG59XG4iXX0=