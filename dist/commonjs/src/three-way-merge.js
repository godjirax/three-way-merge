"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const merger_1 = require("./merger");
const collater_1 = require("./collater");
const resolver_1 = require("./resolver");
const defaultJoinFunction = (a) => a.join('\n');
const defaultSplitFunction = (s) => s.split('\n');
const defaultConflictFunction = resolver_1.default('<<<<<<< CURRENT CHANGES', '=======', '>>>>>>> INCOMING CHANGES', defaultJoinFunction);
const defaultOptions = {
    splitFunction: defaultSplitFunction,
    joinFunction: defaultJoinFunction,
    conflictFunction: defaultConflictFunction
};
function merge(left, base, right, options = {}) {
    options = Object.assign({}, defaultOptions, options);
    const [splitLeft, splitBase, splitRight] = [left, base, right].map((t) => {
        return options.splitFunction.call(options, t);
    });
    const mergeResult = merger_1.default.merge(splitLeft, splitBase, splitRight);
    const collatedMergeResults = collater_1.default.collateMerge(mergeResult, options.joinFunction, options.conflictFunction);
    return collatedMergeResults;
}
exports.default = merge;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhyZWUtd2F5LW1lcmdlLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9rZXZpbi90cmF2YWlsL2RldngvdGhyZWUtd2F5LW1lcmdlLyIsInNvdXJjZXMiOlsidGhyZWUtd2F5LW1lcmdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscUNBQThCO0FBRTlCLHlDQUFvRTtBQUNwRSx5Q0FBa0M7QUFFbEMsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLENBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMxRCxNQUFNLG9CQUFvQixHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzFELE1BQU0sdUJBQXVCLEdBQUcsa0JBQVEsQ0FBQyx5QkFBeUIsRUFDekIsU0FBUyxFQUNULDBCQUEwQixFQUMxQixtQkFBbUIsQ0FBQyxDQUFDO0FBRTlELE1BQU0sY0FBYyxHQUFHO0lBQ3JCLGFBQWEsRUFBRSxvQkFBb0I7SUFDbkMsWUFBWSxFQUFFLG1CQUFtQjtJQUNqQyxnQkFBZ0IsRUFBRSx1QkFBdUI7Q0FDMUMsQ0FBQztBQVFGLGVBQThCLElBQVksRUFDWixJQUFZLEVBQ1osS0FBYSxFQUNiLE9BQU8sR0FBYyxFQUFFO0lBQ25ELE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFckQsTUFBTSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1FBQ3ZFLE9BQU8sT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxXQUFXLEdBQUcsZ0JBQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNuRSxNQUFNLG9CQUFvQixHQUFHLGtCQUFRLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBRWhILE9BQU8sb0JBQW9CLENBQUM7QUFDOUIsQ0FBQztBQWRELHdCQWNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1lcmdlciBmcm9tICcuL21lcmdlcic7XG5pbXBvcnQgTWVyZ2VSZXN1bHQgZnJvbSAnLi9tZXJnZS1yZXN1bHQnO1xuaW1wb3J0IENvbGxhdGVyLCB7Sm9pbkZ1bmN0aW9uLCBDb25mbGljdEZ1bmN0aW9ufSBmcm9tICcuL2NvbGxhdGVyJztcbmltcG9ydCByZXNvbHZlciBmcm9tICcuL3Jlc29sdmVyJztcblxuY29uc3QgZGVmYXVsdEpvaW5GdW5jdGlvbiA9IChhOiBzdHJpbmdbXSkgPT4gYS5qb2luKCdcXG4nKTtcbmNvbnN0IGRlZmF1bHRTcGxpdEZ1bmN0aW9uID0gKHM6IHN0cmluZykgPT4gcy5zcGxpdCgnXFxuJyk7XG5jb25zdCBkZWZhdWx0Q29uZmxpY3RGdW5jdGlvbiA9IHJlc29sdmVyKCc8PDw8PDw8IENVUlJFTlQgQ0hBTkdFUycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc9PT09PT09JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJz4+Pj4+Pj4gSU5DT01JTkcgQ0hBTkdFUycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRKb2luRnVuY3Rpb24pO1xuXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgc3BsaXRGdW5jdGlvbjogZGVmYXVsdFNwbGl0RnVuY3Rpb24sXG4gIGpvaW5GdW5jdGlvbjogZGVmYXVsdEpvaW5GdW5jdGlvbixcbiAgY29uZmxpY3RGdW5jdGlvbjogZGVmYXVsdENvbmZsaWN0RnVuY3Rpb25cbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGlmZk9wdGlvbnMge1xuICBzcGxpdEZ1bmN0aW9uOiAoczogc3RyaW5nKSA9PiBzdHJpbmdbXSxcbiAgam9pbkZ1bmN0aW9uOiBKb2luRnVuY3Rpb24sXG4gIGNvbmZsaWN0RnVuY3Rpb246IENvbmZsaWN0RnVuY3Rpb25cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2UobGVmdDogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFzZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM9PERpZmZPcHRpb25zPnt9KSA6IE1lcmdlUmVzdWx0IHtcbiAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcblxuICBjb25zdCBbc3BsaXRMZWZ0LCBzcGxpdEJhc2UsIHNwbGl0UmlnaHRdID0gW2xlZnQsIGJhc2UsIHJpZ2h0XS5tYXAoKHQpID0+IHtcbiAgICByZXR1cm4gb3B0aW9ucy5zcGxpdEZ1bmN0aW9uLmNhbGwob3B0aW9ucywgdCk7XG4gIH0pO1xuXG4gIGNvbnN0IG1lcmdlUmVzdWx0ID0gTWVyZ2VyLm1lcmdlKHNwbGl0TGVmdCwgc3BsaXRCYXNlLCBzcGxpdFJpZ2h0KTtcbiAgY29uc3QgY29sbGF0ZWRNZXJnZVJlc3VsdHMgPSBDb2xsYXRlci5jb2xsYXRlTWVyZ2UobWVyZ2VSZXN1bHQsIG9wdGlvbnMuam9pbkZ1bmN0aW9uLCBvcHRpb25zLmNvbmZsaWN0RnVuY3Rpb24pO1xuXG4gIHJldHVybiBjb2xsYXRlZE1lcmdlUmVzdWx0cztcbn1cbiJdfQ==